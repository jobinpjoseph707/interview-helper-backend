// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterviewHelper.DataAccess.Migrations
{
    [DbContext(typeof(InterviewAppDbContext))]
    partial class InterviewAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("intervirew_helper_backend.Models.ApplicationRole", b =>
                {
                    b.Property<int>("ApplicationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationRoleId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationRoleId");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            ApplicationRoleId = 1,
                            IsActive = true,
                            Name = "Front End Developer"
                        },
                        new
                        {
                            ApplicationRoleId = 2,
                            IsActive = true,
                            Name = "Back End Developer"
                        },
                        new
                        {
                            ApplicationRoleId = 3,
                            IsActive = true,
                            Name = "Database/SQl"
                        });
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateId"));

                    b.Property<int>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverallScore")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CandidateId");

                    b.HasIndex("ApplicationRoleId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.CandidateTechnologyScore", b =>
                {
                    b.Property<int>("CandidateTechnologyScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateTechnologyScoreId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.HasKey("CandidateTechnologyScoreId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CandidateTechnologyScores");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.ExperienceLevel", b =>
                {
                    b.Property<int>("ExperienceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceLevelId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceLevelId");

                    b.ToTable("ExperienceLevels");

                    b.HasData(
                        new
                        {
                            ExperienceLevelId = 1,
                            IsActive = true,
                            Level = "Fresher"
                        },
                        new
                        {
                            ExperienceLevelId = 2,
                            IsActive = true,
                            Level = "Mid"
                        },
                        new
                        {
                            ExperienceLevelId = 3,
                            IsActive = true,
                            Level = "Senior"
                        });
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("ApplicationRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnologyId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            TechnologyId = 1,
                            IsActive = true,
                            Name = "Angular"
                        },
                        new
                        {
                            TechnologyId = 2,
                            IsActive = true,
                            Name = "React"
                        },
                        new
                        {
                            TechnologyId = 3,
                            IsActive = true,
                            Name = "Vue.js"
                        },
                        new
                        {
                            TechnologyId = 4,
                            IsActive = true,
                            Name = "Svelte"
                        },
                        new
                        {
                            TechnologyId = 5,
                            IsActive = true,
                            Name = "HTML5"
                        },
                        new
                        {
                            TechnologyId = 6,
                            IsActive = true,
                            Name = "CSS3"
                        },
                        new
                        {
                            TechnologyId = 7,
                            IsActive = true,
                            Name = "JavaScript"
                        },
                        new
                        {
                            TechnologyId = 8,
                            IsActive = true,
                            Name = "TypeScript"
                        },
                        new
                        {
                            TechnologyId = 9,
                            IsActive = true,
                            Name = "Bootstrap"
                        },
                        new
                        {
                            TechnologyId = 10,
                            IsActive = true,
                            Name = "TailwindCSS"
                        },
                        new
                        {
                            TechnologyId = 11,
                            IsActive = true,
                            Name = "Angular Material"
                        },
                        new
                        {
                            TechnologyId = 12,
                            IsActive = true,
                            Name = "Ant Design"
                        },
                        new
                        {
                            TechnologyId = 13,
                            IsActive = true,
                            Name = "Chakra UI"
                        },
                        new
                        {
                            TechnologyId = 14,
                            IsActive = true,
                            Name = "Node.js + Express"
                        },
                        new
                        {
                            TechnologyId = 15,
                            IsActive = true,
                            Name = ".NET Core"
                        },
                        new
                        {
                            TechnologyId = 16,
                            IsActive = true,
                            Name = "Django"
                        },
                        new
                        {
                            TechnologyId = 17,
                            IsActive = true,
                            Name = "Flask"
                        },
                        new
                        {
                            TechnologyId = 18,
                            IsActive = true,
                            Name = "Spring Boot"
                        },
                        new
                        {
                            TechnologyId = 19,
                            IsActive = true,
                            Name = "Ruby on Rails"
                        },
                        new
                        {
                            TechnologyId = 20,
                            IsActive = true,
                            Name = "PHP + Laravel"
                        },
                        new
                        {
                            TechnologyId = 21,
                            IsActive = true,
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            TechnologyId = 22,
                            IsActive = true,
                            Name = "MySQL"
                        },
                        new
                        {
                            TechnologyId = 23,
                            IsActive = true,
                            Name = "MariaDB"
                        },
                        new
                        {
                            TechnologyId = 24,
                            IsActive = true,
                            Name = "SQLite"
                        },
                        new
                        {
                            TechnologyId = 25,
                            IsActive = true,
                            Name = "Microsoft SQL Server"
                        },
                        new
                        {
                            TechnologyId = 26,
                            IsActive = true,
                            Name = "MongoDB"
                        },
                        new
                        {
                            TechnologyId = 27,
                            IsActive = true,
                            Name = "Firebase"
                        },
                        new
                        {
                            TechnologyId = 28,
                            IsActive = true,
                            Name = "Cassandra"
                        },
                        new
                        {
                            TechnologyId = 29,
                            IsActive = true,
                            Name = "Redis"
                        },
                        new
                        {
                            TechnologyId = 30,
                            IsActive = true,
                            Name = "Neo4j"
                        });
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.Candidate", b =>
                {
                    b.HasOne("intervirew_helper_backend.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("Candidates")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.CandidateTechnologyScore", b =>
                {
                    b.HasOne("intervirew_helper_backend.Models.Candidate", "Candidate")
                        .WithMany("CandidateTechnologyScores")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("intervirew_helper_backend.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany("CandidateTechnologyScores")
                        .HasForeignKey("ExperienceLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("intervirew_helper_backend.Models.Technology", "Technology")
                        .WithMany("CandidateTechnologyScores")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("ExperienceLevel");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.Question", b =>
                {
                    b.HasOne("intervirew_helper_backend.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("Questions")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("intervirew_helper_backend.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany("Questions")
                        .HasForeignKey("ExperienceLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("intervirew_helper_backend.Models.Technology", "Technology")
                        .WithMany("Questions")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ExperienceLevel");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.ApplicationRole", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.Candidate", b =>
                {
                    b.Navigation("CandidateTechnologyScores");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.ExperienceLevel", b =>
                {
                    b.Navigation("CandidateTechnologyScores");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("intervirew_helper_backend.Models.Technology", b =>
                {
                    b.Navigation("CandidateTechnologyScores");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
